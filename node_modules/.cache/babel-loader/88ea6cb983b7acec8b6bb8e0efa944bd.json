{"ast":null,"code":"var _jsxFileName = \"/Users/seanrobnett/Desktop/my-projects/email-archives/src/Component/EmailWindow.js\";\nconst appRoot = document.getElementById(\"app-root\");\nconst modalRoot = document.getElementById(\"modal-root\");\n\nclass EmailWindow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement(\"div\");\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicks: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // This will fire when the button in Child is clicked,\n    // updating Parent's state, even though button\n    // is not direct descendant in the DOM.\n    this.setState(state => ({\n      clicks: state.clicks + 1\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Number of clicks: \", this.state.clicks), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Open up the browser DevTools to observe that the button is not a child of the div with the onClick handler.\"), /*#__PURE__*/React.createElement(EmailWindow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Child, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction Child() {\n  // The click event on this button will bubble up to parent,\n  // because there is no 'onClick' attribute defined\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Click\"));\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Parent, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 17\n  }\n}), appRoot);","map":{"version":3,"sources":["/Users/seanrobnett/Desktop/my-projects/email-archives/src/Component/EmailWindow.js"],"names":["appRoot","document","getElementById","modalRoot","EmailWindow","React","Component","constructor","props","el","createElement","componentDidMount","appendChild","componentWillUnmount","removeChild","render","ReactDOM","createPortal","children","Parent","state","clicks","handleClick","bind","setState","Child"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB;AACA,MAAMC,SAAS,GAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAlB;;AAEA,MAAME,WAAN,SAA0BC,KAAK,CAACC,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,EAAL,GAAUR,QAAQ,CAACS,aAAT,CAAuB,KAAvB,CAAV;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,IAAAA,SAAS,CAACS,WAAV,CAAsB,KAAKH,EAA3B;AACD;;AAEDI,EAAAA,oBAAoB,GAAG;AACrBV,IAAAA,SAAS,CAACW,WAAV,CAAsB,KAAKL,EAA3B;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,WAAOC,QAAQ,CAACC,YAAT,CAAsB,KAAKT,KAAL,CAAWU,QAAjC,EAA2C,KAAKT,EAAhD,CAAP;AACD;;AAxBuC;;AA2B1C,MAAMU,MAAN,SAAqBd,KAAK,CAACC,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKY,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAb;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,GAAG;AACZ;AACA;AACA;AACA,SAAKE,QAAL,CAAcJ,KAAK,KAAK;AACtBC,MAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,GAAe;AADD,KAAL,CAAnB;AAGD;;AAEDN,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,OAAO,EAAE,KAAKO,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAsB,KAAKF,KAAL,CAAWC,MAAjC,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHAFF,eAME,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANF,CADF;AAYD;;AA7BkC;;AAgCrC,SAASI,KAAT,GAAiB;AACf;AACA;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF;AAKD;;AAEDT,QAAQ,CAACD,MAAT,eAAgB,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA4Bf,OAA5B","sourcesContent":["const appRoot = document.getElementById(\"app-root\");\nconst modalRoot = document.getElementById(\"modal-root\");\n\nclass EmailWindow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement(\"div\");\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicks: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // This will fire when the button in Child is clicked,\n    // updating Parent's state, even though button\n    // is not direct descendant in the DOM.\n    this.setState(state => ({\n      clicks: state.clicks + 1\n    }));\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}>\n        <p>Number of clicks: {this.state.clicks}</p>\n        <p>\n          Open up the browser DevTools to observe that the button is not a child\n          of the div with the onClick handler.\n        </p>\n        <EmailWindow>\n          <Child />\n        </EmailWindow>\n      </div>\n    );\n  }\n}\n\nfunction Child() {\n  // The click event on this button will bubble up to parent,\n  // because there is no 'onClick' attribute defined\n  return (\n    <div className='modal'>\n      <button>Click</button>\n    </div>\n  );\n}\n\nReactDOM.render(<Parent />, appRoot);\n"]},"metadata":{},"sourceType":"module"}